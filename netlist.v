/* Generated by Yosys 0.50+7 (git sha1 38f858374, x86_64-w64-mingw32-g++ 13.2.1 -O3) */

(* top =  1  *)
(* src = "Adderfsm.v:1.1-52.10" *)
module adder(clk, rst, a, b, stream);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "Adderfsm.v:2.19-2.20" *)
  input a;
  wire a;
  (* src = "Adderfsm.v:2.21-2.22" *)
  input b;
  wire b;
  (* src = "Adderfsm.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "Adderfsm.v:11.19-11.29" *)
  wire next_state;
  (* src = "Adderfsm.v:11.5-11.18" *)
  reg present_state;
  (* src = "Adderfsm.v:2.15-2.18" *)
  input rst;
  wire rst;
  (* src = "Adderfsm.v:3.16-3.22" *)
  output stream;
  wire stream;
  assign _0_ = b & a;
  assign _1_ = b | a;
  assign next_state = present_state ? _1_ : _0_;
  assign _2_ = ~(b ^ a);
  assign stream = ~(_2_ ^ present_state);
  (* src = "Adderfsm.v:15.1-22.4" *)
  always @(posedge clk, posedge rst)
    if (rst) present_state <= 1'h0;
    else present_state <= next_state;
endmodule
